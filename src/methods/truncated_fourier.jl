export TFTS, TAAFT

"""   
    TFTS(fϵ::Real)

A truncated Fourier transform surrogate[^Nakamura2006] (TFTS). These surrogates were 
designed to deal with data with irregular fluctuations superimposed over long 
term trends, and are generated by leaving a fraction of the lower frequencies untouched 
when performing the phase shuffling step (as opposed to randomizing all frequencies,
like in [`RandomFourier`](@ref) surrogates).

The truncation parameter `fϵ` is the ratio of the high frequency domain to the 
whole frequency domain. For example, if the number of frequencies is 2000 and frequencies between 1500 and 2000 are to be 
randomized, then `fϵ = 500/2000 = 0.25`. The appropriate value of `fϵ` strongly 
depends on the data and time series length, and must be manually determined[^Nakamura2006],
for example by comparing periodograms for the time series and the surrogates.

The TFTS surrogate can be used to test the null hypothesis that the signal is 
a stationary linear system generated the irregular fluctuations part of the signal[^Nakamura2006].

The by changing the sign of `fϵ`, the implementation here also allows for truncating 
at the opposite end of the spectrum. Thus, negative values of `fϵ` will leave 
the lower frequencies intact and shuffle the higher frequencies (the absolute value 
of `fϵ` still refers to the fraction of high frequency domain to total frequency domain).

[^Nakamura2006]: Nakamura, Tomomichi, Michael Small, and Yoshito Hirata. "Testing for nonlinearity in irregular fluctuations with long-term trends." Physical Review E 74.2 (2006): 026205.
"""
struct TFTS <: Surrogate
    fϵ # ratio of high-frequency domain to the whole domain

    function TFTS(fϵ::Real)
        fϵ >= 0 || error("`fϵ` must be >= 0")
        new(fϵ)
    end
end
TFTS() = error("The truncation factor `fϵ` must be supplied")

function surrogenerator(x, method::TFTS)
    # Pre-plan Fourier transforms
    forward = plan_rfft(x)
    inverse = plan_irfft(forward*x, length(x))
    
    # Pre-compute 𝓕
    𝓕 = forward*x

    # Polar coordinate representation of the Fourier transform
    rx = abs.(𝓕)
    ϕx = angle.(𝓕)
    n = length(𝓕)
    
    x_sorted = sort(x)

    # These are updated during iteration procedure
    𝓕new = Vector{Complex{Float64}}(undef, length(𝓕))
    𝓕s = Vector{Complex{Float64}}(undef, length(𝓕))
    ϕs = Vector{Complex{Float64}}(undef, length(𝓕))

    init = (forward = forward, inverse = inverse, 
        rx = rx, ϕx = ϕx, n = n, 
        x_sorted = x_sorted,
        𝓕new = 𝓕new, 𝓕s = 𝓕s, ϕs = ϕs)

    return SurrogateGenerator(method, x, init)
end

function (sg::SurrogateGenerator{<:TFTS})()
    x = sg.x 
    fϵ = sg.method.fϵ
    L = length(x)

    init_fields = (:forward, :inverse, 
        :rx, :ϕx, :n, 
        :x_sorted, 
        :𝓕new, :𝓕s, :ϕs)

    forward, inverse, 
        rx, ϕx, n, 
        x_sorted, 
        𝓕new, 𝓕s, ϕs = getfield.(Ref(sg.init), init_fields)

    # Surrogate starts out as a random permutation of x
    s = x[StatsBase.sample(1:L, L, replace = false)]
    𝓕s .= forward*s
    ϕs .= angle.(𝓕s)

    # Updated spectrum is the old amplitudes with the mixed phases.
    if fϵ > 0 
        # Frequencies are ordered from lowest when taking the Fourier 
        # transform, so by keeping the 1:n_ni first phases intact, 
        # we are only randomizing the high-frequency components of the 
        # signal.
        n_hi = ceil(Int, abs(fϵ * n))
        ϕs[1:n_hi] .= ϕx[1:n_hi] # lowest frequencies are kept
    elseif fϵ < 0 
        n_hi = ceil(Int, abs(fϵ * n))
        ϕs[end-n_hi:end] .= ϕx[end-n_hi:end]
    end

    𝓕new .= rx .* exp.(ϕs .* 1im)
    
    return inverse*𝓕new
end

"""
    TAAFT(fϵ)

An truncated version of the amplitude-adjusted-fourier-transform surrogate[^Theiler1992, ^Nakamura2006].

The truncation parameter and phase randomization procedure is identical to [`TFTS`](@ref), but here an 
additional step of rescaling back to the original data is performed. This preserves the 
amplitude distribution of the original data.

# References 

[^Theiler1992]: J. Theiler et al., Physica D *58* (1992) 77-94 (1992)](https://www.sciencedirect.com/science/article/pii/016727899290102S)

[^Nakamura2006]: Nakamura, Tomomichi, Michael Small, and Yoshito Hirata. "Testing for nonlinearity in irregular fluctuations with long-term trends." Physical Review E 74.2 (2006): 026205.
"""
struct TAAFT <: Surrogate
    fϵ # ratio of high-frequency domain to the whole domain

    function TAAFT(fϵ::Real)
        fϵ >= 0 || error("`fϵ` must be >= 0")
        new(fϵ)
    end
end
TAAFT() = error("The truncation factor `fϵ` must be supplied")

function surrogenerator(x, method::TAAFT)
    init = surrogenerator(x, TFTS(method.fϵ))
    return SurrogateGenerator(method, x, init)
end

function (taaft::SurrogateGenerator{<:TAAFT})()
    println("here")
    sg = taaft.init
    s = sg()
    s[sortperm(s)] .= sg.init.x_sorted
    #@show all(sort(sg.init.x) .== sort(s))
    return s
end