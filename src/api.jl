export surrogate, surrogenerator, Surrogate

"""Supertype of all surrogate methods."""
abstract type Surrogate end

struct SurrogateGenerator{S<:Surrogate, X, Y, A, R<:AbstractRNG}
    method::S # method with its input parameters
    x::X      # input timeseries
    s::Y      # surrogate (usually same type as `x`, but not always)
    init::A   # pre-initialized things that speed up process
    rng::R    # random number generator object
end

"""
    surrogenerator(x, method::Surrogate [, rng]) → sg::SurrogateGenerator

Initialize a generator that creates surrogates of `x` on demand, based on the given `method`.
This is efficient, because for most methods some things can be initialized and reused
for every surrogate. Optionally you can provide an `rng::AbstractRNG` object that will
control the random number generation and hence establish reproducibility of the
generated surrogates. By default `Random.default_rng()` is used.

Notice that the generated surrogates overwrite, in-place, a common vector container.
Use copy if you need to actually store multiple surrogates.

To generate a surrogate, call `sg` as a function with no arguments, e.g.:

```julia
sg = surrogenerator(x, method)
s = sg()
```

Notice that you can use the generator syntax of Julia to map over surrogates
generated by `sg`. For example, let `q` be a function returning a discriminatory statistic.
In the typical application scenario of TimeseriesSurrogates.jl you'd do

```julia
using TimeseriesSurrogates
q, x # inputs
method = RandomFourier() # some example method
sgen = surrogenerator(x, method)
siter = (sgen() for _ in 1:1000)
qx = q(x)
qs = map(q, siter)
# compare `qx` with quantiles
using Statistics: quantile
q05, q95 = quantile(qs, [0.05, 0.95])
q05 ≤ qx ≤ q95
```
"""
function surrogenerator end

function Base.show(io::IO, sg::SurrogateGenerator)
    println(io, "Surrogate generator for input timeseries $(summary(sg.x)) with method:")
    show(io, sg.method)
end

"""
    surrogate(x, method::Surrogate [, rng]) → s
Create a single surrogate timeseries `s` from `x` based on the given `method`.
If you want to generate multiple surrogates from `x`, you should use [`surrogenerator`](@ref)
for better performance.
"""
function surrogate(x, method::Surrogate, rng = Random.default_rng())
    sg = surrogenerator(x, method, rng)
    sg()
end
